version "8.1"
file version 0, 0
comment { This code was generated by Net4ASLGenerator tool. Do not change the code manually }
modules {
	import <"Net4ASL.gem">
	into namespace Net4ASL
	import <"EasyDebug.gem">
	into namespace EasyDebug
}
constants 
{
	AsAsrMicrosoft_AsAsrMicrosoft := "AsAsrMicrosoft.AsAsrMicrosoft"
}
types 
{
	ObjectHandle: number
	ExceptionHandle: number
	ErrorCode: number
	String: text
	Char: text
	Boolean: boolean
	Byte: number(18,0)
	SByte: number(18,0)
	Int16: number(18,0)
	UInt16: number(18,0)
	Int32: number(18,0)
	UInt32: number(18,0)
	Int64: number(18,0)
	UInt64: number(18,0)
	Single: number(30,15)
	Double: number(30,15)
	Decimal: number(30,15)
	DateTime: datetime
	TimeSpan: number(18,0)
	NullableBoolean: boolean
	NullableChar: text
	NullableByte: number(18,0)
	NullableSByte: number(18,0)
	NullableInt16: number(18,0)
	NullableInt32: number(18,0)
	NullableInt64: number(18,0)
	NullableUInt16: number(18,0)
	NullableUInt32: number(18,0)
	NullableUInt64: number(18,0)
	NullableDecimal: number(30,15)
	NullableDouble: number(30,15)
	NullableSingle: number(30,15)
	NullableDateTime: datetime
	NullableTimeSpan: number(18,0)
	AsAsrMicrosoft: ObjectHandle
}
variables {
	gn_error : number(18,0) := 0
	go_exception : ObjectHandle := 0
}
cursors {}
function Initialize
(

)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> Initialize()')
	gn_error := 0
	var lt_assembly : text := 'AsAsrMicrosoft.dll'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::LoadAssembly(lt_assembly)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	Initialize := gn_error
	call EasyDebug::OutHighDetail('<< Initialize')
}
function InitializeFrom
(
lt_assemblyLoadDirectory : text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> InitializeFrom(lt_assemblyLoadDirectory:[$(lt_assemblyLoadDirectory)])')
	gn_error := 0
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::ChangeAssemblyLoadPath(lt_assemblyLoadDirectory)
			}
	var lt_assembly : text := 'AsAsrMicrosoft.dll'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::LoadAssembly(lt_assembly)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	InitializeFrom := gn_error
	call EasyDebug::OutHighDetail('<< InitializeFrom')
}
function RestartDebug
(
lt_directory : text ,lt_prefix : text ,ln_detail : number(18,0) 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> RestartDebug(lt_directory:[$(lt_directory)], lt_prefix:[$(lt_prefix)], ln_detail:[$(ln_detail)])')
	gn_error := 0
	var ln_flags : number(18,0) := EasyDebug::PROFILE_ASL
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::RestartDebug(lt_directory, lt_prefix, ln_detail, ln_flags)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	RestartDebug := gn_error
	call EasyDebug::OutHighDetail('<< RestartDebug')
}
function AsAsrMicrosoft_IsReferenceOfType
(
io_objectHandle : ObjectHandle ,ref AsAsrMicrosoft_IsReferenceOfType_Return : text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AsAsrMicrosoft_IsReferenceOfType(io_objectHandle:[$(io_objectHandle)])')
	gn_error := 0
	var lt_type : text
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetType(io_objectHandle, lt_type)
			}
	var lb_return : boolean
	if (lt_type = AsAsrMicrosoft_AsAsrMicrosoft) then 	{
		lb_return := true
	}
	else 	{
		lb_return := false
	}
	AsAsrMicrosoft_IsReferenceOfType_Return := lb_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AsAsrMicrosoft_IsReferenceOfType := gn_error
	call EasyDebug::OutHighDetail('<< AsAsrMicrosoft_IsReferenceOfType(AsAsrMicrosoft_IsReferenceOfType_Return:[$(AsAsrMicrosoft_IsReferenceOfType_Return)])')
}
function new_AsAsrMicrosoft
(
pLogs4NetDir : String ,pDebugDir : String ,pUserName : String ,ref new_AsAsrMicrosoft_Return : AsAsrMicrosoft 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> new_AsAsrMicrosoft(pLogs4NetDir:[$(pLogs4NetDir)], pDebugDir:[$(pDebugDir)], pUserName:[$(pUserName)])')
	gn_error := 0
	var lo_pLogs4NetDir : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pLogs4NetDir, lo_pLogs4NetDir)
			}
	var lo_pDebugDir : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pDebugDir, lo_pDebugDir)
			}
	var lo_pUserName : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pUserName, lo_pUserName)
			}
	var lt_lh_params_assemblyPath : text := 'AsAsrMicrosoft.dll'
	var lt_lh_params_assembly : text := ''
	var lt_lh_params_type : text := 'System.Object'
	var lh_params : ObjectHandle
	var ln_lh_params_size : number(18,0) := 3
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateArray(lt_lh_params_assemblyPath, lt_lh_params_assembly, lt_lh_params_type, ln_lh_params_size, lh_params)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 0, lo_pLogs4NetDir)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 1, lo_pDebugDir)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 2, lo_pUserName)
			}
	var lt_lh_instance_assembly : text := 'AsAsrMicrosoft.dll'
	var lt_lh_instance_type : text := 'AsAsrMicrosoft.AsAsrMicrosoft'
	var lh_instance : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateObject(lt_lh_instance_assembly, lt_lh_instance_type, lh_params, lh_instance, go_exception)
			}
	new_AsAsrMicrosoft_Return := lh_instance
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	new_AsAsrMicrosoft := gn_error
	call EasyDebug::OutHighDetail('<< new_AsAsrMicrosoft(new_AsAsrMicrosoft_Return: some value)')
}
function AsAsrMicrosoft_Recognice
(
ref rh_instance : AsAsrMicrosoft
,pFile : String ,pTimeOut : Int32 ,ref AsAsrMicrosoft_Recognice_Return : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AsAsrMicrosoft_Recognice(rh_instance:[$(rh_instance)], pFile:[$(pFile)], pTimeOut:[$(pTimeOut)])')
	gn_error := 0
	var lo_pFile : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pFile, lo_pFile)
			}
	var lo_pTimeOut : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyNumberToInt32(pTimeOut, lo_pTimeOut)
			}
	var lt_lh_params_assemblyPath : text := 'AsAsrMicrosoft.dll'
	var lt_lh_params_assembly : text := ''
	var lt_lh_params_type : text := 'System.Object'
	var lh_params : ObjectHandle
	var ln_lh_params_size : number(18,0) := 2
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateArray(lt_lh_params_assemblyPath, lt_lh_params_assembly, lt_lh_params_type, ln_lh_params_size, lh_params)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 0, lo_pFile)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 1, lo_pTimeOut)
			}
	var lt_Recognice_method : text := 'Recognice'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::Invoke(rh_instance, lt_Recognice_method, lh_params, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxStringToEasyText(lh_retVar, AsAsrMicrosoft_Recognice_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AsAsrMicrosoft_Recognice := gn_error
	call EasyDebug::OutHighDetail('<< AsAsrMicrosoft_Recognice(AsAsrMicrosoft_Recognice_Return:[$(AsAsrMicrosoft_Recognice_Return)])')
}
on load 
{
	gn_error := Net4ASL::StartSession()
}
on unload 
{
	gn_error := Net4ASL::EndSession()
}
