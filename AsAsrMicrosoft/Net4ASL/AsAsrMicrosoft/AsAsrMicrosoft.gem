version "8.1"
file version 0, 0
comment { This code was generated by Net4ASLGenerator tool. Do not change the code manually }
modules {
	import <"Net4ASL.gem">
	into namespace Net4ASL
	import <"EasyDebug.gem">
	into namespace EasyDebug
}
constants 
{
	AsAsrMicrosoft_AsAsrMicrosoft := "AsAsrMicrosoft.AsAsrMicrosoft"
	AsAsrMicrosoft_LuisOutputResponse := "AsAsrMicrosoft.LuisOutputResponse"
	CognitiveServicesTTS_Gender := "CognitiveServicesTTS.Gender"
	CognitiveServicesTTS_AudioOutputFormat := "CognitiveServicesTTS.AudioOutputFormat"
}
types 
{
	ObjectHandle: number
	ExceptionHandle: number
	ErrorCode: number
	String: text
	Char: text
	Boolean: boolean
	Byte: number(18,0)
	SByte: number(18,0)
	Int16: number(18,0)
	UInt16: number(18,0)
	Int32: number(18,0)
	UInt32: number(18,0)
	Int64: number(18,0)
	UInt64: number(18,0)
	Single: number(30,15)
	Double: number(30,15)
	Decimal: number(30,15)
	DateTime: datetime
	TimeSpan: number(18,0)
	NullableBoolean: boolean
	NullableChar: text
	NullableByte: number(18,0)
	NullableSByte: number(18,0)
	NullableInt16: number(18,0)
	NullableInt32: number(18,0)
	NullableInt64: number(18,0)
	NullableUInt16: number(18,0)
	NullableUInt32: number(18,0)
	NullableUInt64: number(18,0)
	NullableDecimal: number(30,15)
	NullableDouble: number(30,15)
	NullableSingle: number(30,15)
	NullableDateTime: datetime
	NullableTimeSpan: number(18,0)
	AsAsrMicrosoft: ObjectHandle
	LuisOutputResponse: ObjectHandle
	Gender_: enumeration
	{
		Female := 0
		Male := 1
	}
	AudioOutputFormat: enumeration
	{
		Raw8Khz8BitMonoMULaw := 0
		Raw16Khz16BitMonoPcm := 1
		Riff8Khz8BitMonoMULaw := 2
		Riff16Khz16BitMonoPcm := 3
		Ssml16Khz16BitMonoSilk := 4
		Raw16Khz16BitMonoTrueSilk := 5
		Ssml16Khz16BitMonoTts := 6
		Audio16Khz128KBitRateMonoMp3 := 7
		Audio16Khz64KBitRateMonoMp3 := 8
		Audio16Khz32KBitRateMonoMp3 := 9
		Audio16Khz16KbpsMonoSiren := 10
		Riff16Khz16KbpsMonoSiren := 11
	}
	LuisOutputResponse_Record : record 	{
		query : String 
		topScoringIntent : String 
		topScoringScore : Decimal 
		EntityFrom : String 
		EntityFromType : String 
		EntityFromScore : Decimal 
		EntityTo : String 
		EntityType : String 
		EntityToScore : Decimal 
	}
}
variables {
	gn_error : number(18,0) := 0
	go_exception : ObjectHandle := 0
}
cursors {}
function Initialize
(

)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> Initialize()')
	gn_error := 0
	var lt_assembly : text := 'AsAsrMicrosoft.dll'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::LoadAssembly(lt_assembly)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	Initialize := gn_error
	call EasyDebug::OutHighDetail('<< Initialize')
}
function InitializeFrom
(
lt_assemblyLoadDirectory : text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> InitializeFrom(lt_assemblyLoadDirectory:[$(lt_assemblyLoadDirectory)])')
	gn_error := 0
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::ChangeAssemblyLoadPath(lt_assemblyLoadDirectory)
			}
	var lt_assembly : text := 'AsAsrMicrosoft.dll'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::LoadAssembly(lt_assembly)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	InitializeFrom := gn_error
	call EasyDebug::OutHighDetail('<< InitializeFrom')
}
function RestartDebug
(
lt_directory : text ,lt_prefix : text ,ln_detail : number(18,0) 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> RestartDebug(lt_directory:[$(lt_directory)], lt_prefix:[$(lt_prefix)], ln_detail:[$(ln_detail)])')
	gn_error := 0
	var ln_flags : number(18,0) := EasyDebug::PROFILE_ASL
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::RestartDebug(lt_directory, lt_prefix, ln_detail, ln_flags)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	RestartDebug := gn_error
	call EasyDebug::OutHighDetail('<< RestartDebug')
}
function AsAsrMicrosoft_IsReferenceOfType
(
io_objectHandle : ObjectHandle ,ref AsAsrMicrosoft_IsReferenceOfType_Return : text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AsAsrMicrosoft_IsReferenceOfType(io_objectHandle:[$(io_objectHandle)])')
	gn_error := 0
	var lt_type : text
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetType(io_objectHandle, lt_type)
			}
	var lb_return : boolean
	if (lt_type = AsAsrMicrosoft_AsAsrMicrosoft) then 	{
		lb_return := true
	}
	else 	{
		lb_return := false
	}
	AsAsrMicrosoft_IsReferenceOfType_Return := lb_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AsAsrMicrosoft_IsReferenceOfType := gn_error
	call EasyDebug::OutHighDetail('<< AsAsrMicrosoft_IsReferenceOfType(AsAsrMicrosoft_IsReferenceOfType_Return:[$(AsAsrMicrosoft_IsReferenceOfType_Return)])')
}
function new_AsAsrMicrosoft
(
pLogs4NetDir : String ,pDebugDir : String ,pUserName : String ,ref new_AsAsrMicrosoft_Return : AsAsrMicrosoft 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> new_AsAsrMicrosoft(pLogs4NetDir:[$(pLogs4NetDir)], pDebugDir:[$(pDebugDir)], pUserName:[$(pUserName)])')
	gn_error := 0
	var lo_pLogs4NetDir : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pLogs4NetDir, lo_pLogs4NetDir)
			}
	var lo_pDebugDir : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pDebugDir, lo_pDebugDir)
			}
	var lo_pUserName : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pUserName, lo_pUserName)
			}
	var lt_lh_params_assemblyPath : text := 'AsAsrMicrosoft.dll'
	var lt_lh_params_assembly : text := ''
	var lt_lh_params_type : text := 'System.Object'
	var lh_params : ObjectHandle
	var ln_lh_params_size : number(18,0) := 3
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateArray(lt_lh_params_assemblyPath, lt_lh_params_assembly, lt_lh_params_type, ln_lh_params_size, lh_params)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 0, lo_pLogs4NetDir)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 1, lo_pDebugDir)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 2, lo_pUserName)
			}
	var lt_lh_instance_assembly : text := 'AsAsrMicrosoft.dll'
	var lt_lh_instance_type : text := 'AsAsrMicrosoft.AsAsrMicrosoft'
	var lh_instance : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateObject(lt_lh_instance_assembly, lt_lh_instance_type, lh_params, lh_instance, go_exception)
			}
	new_AsAsrMicrosoft_Return := lh_instance
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	new_AsAsrMicrosoft := gn_error
	call EasyDebug::OutHighDetail('<< new_AsAsrMicrosoft(new_AsAsrMicrosoft_Return: some value)')
}
function AsAsrMicrosoft_Recognice
(
ref rh_instance : AsAsrMicrosoft
,pFile : String ,pTimeOut : Int32 ,ref AsAsrMicrosoft_Recognice_Return : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AsAsrMicrosoft_Recognice(rh_instance:[$(rh_instance)], pFile:[$(pFile)], pTimeOut:[$(pTimeOut)])')
	gn_error := 0
	var lo_pFile : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pFile, lo_pFile)
			}
	var lo_pTimeOut : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyNumberToInt32(pTimeOut, lo_pTimeOut)
			}
	var lt_lh_params_assemblyPath : text := 'AsAsrMicrosoft.dll'
	var lt_lh_params_assembly : text := ''
	var lt_lh_params_type : text := 'System.Object'
	var lh_params : ObjectHandle
	var ln_lh_params_size : number(18,0) := 2
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateArray(lt_lh_params_assemblyPath, lt_lh_params_assembly, lt_lh_params_type, ln_lh_params_size, lh_params)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 0, lo_pFile)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 1, lo_pTimeOut)
			}
	var lt_Recognice_method : text := 'Recognice'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::Invoke(rh_instance, lt_Recognice_method, lh_params, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxStringToEasyText(lh_retVar, AsAsrMicrosoft_Recognice_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AsAsrMicrosoft_Recognice := gn_error
	call EasyDebug::OutHighDetail('<< AsAsrMicrosoft_Recognice(AsAsrMicrosoft_Recognice_Return:[$(AsAsrMicrosoft_Recognice_Return)])')
}
function AsAsrMicrosoft_PlayTTS
(
ref rh_instance : AsAsrMicrosoft
,pText : String ,pVoice : String ,pFile : String ,ref AsAsrMicrosoft_PlayTTS_Return : Boolean 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AsAsrMicrosoft_PlayTTS(rh_instance:[$(rh_instance)], pText:[$(pText)], pVoice:[$(pVoice)], pFile:[$(pFile)])')
	gn_error := 0
	var lo_pText : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pText, lo_pText)
			}
	var lo_pVoice : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pVoice, lo_pVoice)
			}
	var lo_pFile : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pFile, lo_pFile)
			}
	var lt_lh_params_assemblyPath : text := 'AsAsrMicrosoft.dll'
	var lt_lh_params_assembly : text := ''
	var lt_lh_params_type : text := 'System.Object'
	var lh_params : ObjectHandle
	var ln_lh_params_size : number(18,0) := 3
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateArray(lt_lh_params_assemblyPath, lt_lh_params_assembly, lt_lh_params_type, ln_lh_params_size, lh_params)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 0, lo_pText)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 1, lo_pVoice)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 2, lo_pFile)
			}
	var lt_PlayTTS_method : text := 'PlayTTS'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::Invoke(rh_instance, lt_PlayTTS_method, lh_params, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxBooleanToEasyBoolean(lh_retVar, AsAsrMicrosoft_PlayTTS_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AsAsrMicrosoft_PlayTTS := gn_error
	call EasyDebug::OutHighDetail('<< AsAsrMicrosoft_PlayTTS(AsAsrMicrosoft_PlayTTS_Return:[$(AsAsrMicrosoft_PlayTTS_Return)])')
}
function AsAsrMicrosoft_GetLuisAnswer
(
ref rh_instance : AsAsrMicrosoft
,pText : String ,ref pResponse : LuisOutputResponse ,ref AsAsrMicrosoft_GetLuisAnswer_Return : Boolean 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AsAsrMicrosoft_GetLuisAnswer(rh_instance:[$(rh_instance)], pText:[$(pText)], pResponse:[$(pResponse)])')
	gn_error := 0
	var lo_pText : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(pText, lo_pText)
			}
	var lo_pResponse : ObjectHandle
	call EasyDebug::HighDetail('Assigning pResponse to lo_pResponse...')
	lo_pResponse := pResponse
	var lt_lh_params_assemblyPath : text := 'AsAsrMicrosoft.dll'
	var lt_lh_params_assembly : text := ''
	var lt_lh_params_type : text := 'System.Object'
	var lh_params : ObjectHandle
	var ln_lh_params_size : number(18,0) := 2
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateArray(lt_lh_params_assemblyPath, lt_lh_params_assembly, lt_lh_params_type, ln_lh_params_size, lh_params)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 0, lo_pText)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetArrayValue(lh_params, 1, lo_pResponse)
			}
	var lt_GetLuisAnswer_method : text := 'GetLuisAnswer'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::Invoke(rh_instance, lt_GetLuisAnswer_method, lh_params, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetArrayValue(lh_params, 1, lo_pResponse)
			}
	pResponse := lo_pResponse
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxBooleanToEasyBoolean(lh_retVar, AsAsrMicrosoft_GetLuisAnswer_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AsAsrMicrosoft_GetLuisAnswer := gn_error
	call EasyDebug::OutHighDetail('<< AsAsrMicrosoft_GetLuisAnswer(AsAsrMicrosoft_GetLuisAnswer_Return:[$(AsAsrMicrosoft_GetLuisAnswer_Return)])')
}
function LuisOutputResponse_IsReferenceOfType
(
io_objectHandle : ObjectHandle ,ref LuisOutputResponse_IsReferenceOfType_Return : text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_IsReferenceOfType(io_objectHandle:[$(io_objectHandle)])')
	gn_error := 0
	var lt_type : text
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetType(io_objectHandle, lt_type)
			}
	var lb_return : boolean
	if (lt_type = AsAsrMicrosoft_LuisOutputResponse) then 	{
		lb_return := true
	}
	else 	{
		lb_return := false
	}
	LuisOutputResponse_IsReferenceOfType_Return := lb_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_IsReferenceOfType := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_IsReferenceOfType(LuisOutputResponse_IsReferenceOfType_Return:[$(LuisOutputResponse_IsReferenceOfType_Return)])')
}
function LuisOutputResponse_ToObject
(
ref rh_instance : LuisOutputResponse
,ir_LuisOutputResponse_Record : LuisOutputResponse_Record 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_ToObject(rh_instance:[$(rh_instance)], ir_LuisOutputResponse_Record: some value)')
	gn_error := 0
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Setting query...')
		gn_error := LuisOutputResponse_query_Set(rh_instance,ir_LuisOutputResponse_Record.query)
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Setting topScoringIntent...')
		gn_error := LuisOutputResponse_topScoringIntent_Set(rh_instance,ir_LuisOutputResponse_Record.topScoringIntent)
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Setting topScoringScore...')
		gn_error := LuisOutputResponse_topScoringScore_Set(rh_instance,ir_LuisOutputResponse_Record.topScoringScore)
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Setting EntityFrom...')
		gn_error := LuisOutputResponse_EntityFrom_Set(rh_instance,ir_LuisOutputResponse_Record.EntityFrom)
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Setting EntityFromType...')
		gn_error := LuisOutputResponse_EntityFromType_Set(rh_instance,ir_LuisOutputResponse_Record.EntityFromType)
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Setting EntityFromScore...')
		gn_error := LuisOutputResponse_EntityFromScore_Set(rh_instance,ir_LuisOutputResponse_Record.EntityFromScore)
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Setting EntityTo...')
		gn_error := LuisOutputResponse_EntityTo_Set(rh_instance,ir_LuisOutputResponse_Record.EntityTo)
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Setting EntityType...')
		gn_error := LuisOutputResponse_EntityType_Set(rh_instance,ir_LuisOutputResponse_Record.EntityType)
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Setting EntityToScore...')
		gn_error := LuisOutputResponse_EntityToScore_Set(rh_instance,ir_LuisOutputResponse_Record.EntityToScore)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_ToObject := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_ToObject')
}
function LuisOutputResponse_ToRecord
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_ToRecord_Return : LuisOutputResponse_Record 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_ToRecord(rh_instance:[$(rh_instance)])')
	gn_error := 0
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Getting query...')
		gn_error := LuisOutputResponse_query_Get(rh_instance, LuisOutputResponse_ToRecord_Return.query)
		call EasyDebug::HighDetail('LuisOutputResponse_ToRecord_Return.query:[$(LuisOutputResponse_ToRecord_Return.query)]')
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Getting topScoringIntent...')
		gn_error := LuisOutputResponse_topScoringIntent_Get(rh_instance, LuisOutputResponse_ToRecord_Return.topScoringIntent)
		call EasyDebug::HighDetail('LuisOutputResponse_ToRecord_Return.topScoringIntent:[$(LuisOutputResponse_ToRecord_Return.topScoringIntent)]')
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Getting topScoringScore...')
		gn_error := LuisOutputResponse_topScoringScore_Get(rh_instance, LuisOutputResponse_ToRecord_Return.topScoringScore)
		call EasyDebug::HighDetail('LuisOutputResponse_ToRecord_Return.topScoringScore:[$(LuisOutputResponse_ToRecord_Return.topScoringScore)]')
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Getting EntityFrom...')
		gn_error := LuisOutputResponse_EntityFrom_Get(rh_instance, LuisOutputResponse_ToRecord_Return.EntityFrom)
		call EasyDebug::HighDetail('LuisOutputResponse_ToRecord_Return.EntityFrom:[$(LuisOutputResponse_ToRecord_Return.EntityFrom)]')
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Getting EntityFromType...')
		gn_error := LuisOutputResponse_EntityFromType_Get(rh_instance, LuisOutputResponse_ToRecord_Return.EntityFromType)
		call EasyDebug::HighDetail('LuisOutputResponse_ToRecord_Return.EntityFromType:[$(LuisOutputResponse_ToRecord_Return.EntityFromType)]')
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Getting EntityFromScore...')
		gn_error := LuisOutputResponse_EntityFromScore_Get(rh_instance, LuisOutputResponse_ToRecord_Return.EntityFromScore)
		call EasyDebug::HighDetail('LuisOutputResponse_ToRecord_Return.EntityFromScore:[$(LuisOutputResponse_ToRecord_Return.EntityFromScore)]')
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Getting EntityTo...')
		gn_error := LuisOutputResponse_EntityTo_Get(rh_instance, LuisOutputResponse_ToRecord_Return.EntityTo)
		call EasyDebug::HighDetail('LuisOutputResponse_ToRecord_Return.EntityTo:[$(LuisOutputResponse_ToRecord_Return.EntityTo)]')
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Getting EntityType...')
		gn_error := LuisOutputResponse_EntityType_Get(rh_instance, LuisOutputResponse_ToRecord_Return.EntityType)
		call EasyDebug::HighDetail('LuisOutputResponse_ToRecord_Return.EntityType:[$(LuisOutputResponse_ToRecord_Return.EntityType)]')
			}
	if (gn_error = 0) then 		{
		call EasyDebug::HighDetail('Getting EntityToScore...')
		gn_error := LuisOutputResponse_EntityToScore_Get(rh_instance, LuisOutputResponse_ToRecord_Return.EntityToScore)
		call EasyDebug::HighDetail('LuisOutputResponse_ToRecord_Return.EntityToScore:[$(LuisOutputResponse_ToRecord_Return.EntityToScore)]')
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_ToRecord := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_ToRecord')
}
function new_LuisOutputResponse
(
ref new_LuisOutputResponse_Return : LuisOutputResponse 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> new_LuisOutputResponse()')
	gn_error := 0
	var lt_lh_params_assemblyPath : text := 'AsAsrMicrosoft.dll'
	var lt_lh_params_assembly : text := ''
	var lt_lh_params_type : text := 'System.Object'
	var lh_params : ObjectHandle
	var ln_lh_params_size : number(18,0) := 0
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateArray(lt_lh_params_assemblyPath, lt_lh_params_assembly, lt_lh_params_type, ln_lh_params_size, lh_params)
			}
	var lt_lh_instance_assembly : text := 'AsAsrMicrosoft.dll'
	var lt_lh_instance_type : text := 'AsAsrMicrosoft.LuisOutputResponse'
	var lh_instance : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::CreateObject(lt_lh_instance_assembly, lt_lh_instance_type, lh_params, lh_instance, go_exception)
			}
	new_LuisOutputResponse_Return := lh_instance
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	new_LuisOutputResponse := gn_error
	call EasyDebug::OutHighDetail('<< new_LuisOutputResponse(new_LuisOutputResponse_Return: some value)')
}
function LuisOutputResponse_query_Get
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_query_Get_Return : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_query_Get(rh_instance:[$(rh_instance)])')
	gn_error := 0
	var lt_query_prop : text := 'query'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetProperty(rh_instance, lt_query_prop, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxStringToEasyText(lh_retVar, LuisOutputResponse_query_Get_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_query_Get := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_query_Get(LuisOutputResponse_query_Get_Return:[$(LuisOutputResponse_query_Get_Return)])')
}
function LuisOutputResponse_query_Set
(
ref rh_instance : LuisOutputResponse
,value_ : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_query_Set(rh_instance:[$(rh_instance)], value:[$(value_)])')
	gn_error := 0
	var lh_value : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(value_, lh_value)
			}
	var lt_query_prop : text := 'query'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetProperty(rh_instance, lt_query_prop, lh_value, go_exception)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_query_Set := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_query_Set')
}
function LuisOutputResponse_topScoringIntent_Get
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_topScoringIntent_Get_Return : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_topScoringIntent_Get(rh_instance:[$(rh_instance)])')
	gn_error := 0
	var lt_topScoringIntent_prop : text := 'topScoringIntent'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetProperty(rh_instance, lt_topScoringIntent_prop, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxStringToEasyText(lh_retVar, LuisOutputResponse_topScoringIntent_Get_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_topScoringIntent_Get := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_topScoringIntent_Get(LuisOutputResponse_topScoringIntent_Get_Return:[$(LuisOutputResponse_topScoringIntent_Get_Return)])')
}
function LuisOutputResponse_topScoringIntent_Set
(
ref rh_instance : LuisOutputResponse
,value_ : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_topScoringIntent_Set(rh_instance:[$(rh_instance)], value:[$(value_)])')
	gn_error := 0
	var lh_value : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(value_, lh_value)
			}
	var lt_topScoringIntent_prop : text := 'topScoringIntent'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetProperty(rh_instance, lt_topScoringIntent_prop, lh_value, go_exception)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_topScoringIntent_Set := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_topScoringIntent_Set')
}
function LuisOutputResponse_topScoringScore_Get
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_topScoringScore_Get_Return : Decimal 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_topScoringScore_Get(rh_instance:[$(rh_instance)])')
	gn_error := 0
	var lt_topScoringScore_prop : text := 'topScoringScore'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetProperty(rh_instance, lt_topScoringScore_prop, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxDecimalToEasyNumber(lh_retVar, LuisOutputResponse_topScoringScore_Get_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_topScoringScore_Get := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_topScoringScore_Get(LuisOutputResponse_topScoringScore_Get_Return:[$(LuisOutputResponse_topScoringScore_Get_Return)])')
}
function LuisOutputResponse_topScoringScore_Set
(
ref rh_instance : LuisOutputResponse
,value_ : Decimal 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_topScoringScore_Set(rh_instance:[$(rh_instance)], value:[$(value_)])')
	gn_error := 0
	var lh_value : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyNumberToDecimal(value_, lh_value)
			}
	var lt_topScoringScore_prop : text := 'topScoringScore'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetProperty(rh_instance, lt_topScoringScore_prop, lh_value, go_exception)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_topScoringScore_Set := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_topScoringScore_Set')
}
function LuisOutputResponse_EntityFrom_Get
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_EntityFrom_Get_Return : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityFrom_Get(rh_instance:[$(rh_instance)])')
	gn_error := 0
	var lt_EntityFrom_prop : text := 'EntityFrom'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetProperty(rh_instance, lt_EntityFrom_prop, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxStringToEasyText(lh_retVar, LuisOutputResponse_EntityFrom_Get_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityFrom_Get := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityFrom_Get(LuisOutputResponse_EntityFrom_Get_Return:[$(LuisOutputResponse_EntityFrom_Get_Return)])')
}
function LuisOutputResponse_EntityFrom_Set
(
ref rh_instance : LuisOutputResponse
,value_ : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityFrom_Set(rh_instance:[$(rh_instance)], value:[$(value_)])')
	gn_error := 0
	var lh_value : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(value_, lh_value)
			}
	var lt_EntityFrom_prop : text := 'EntityFrom'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetProperty(rh_instance, lt_EntityFrom_prop, lh_value, go_exception)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityFrom_Set := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityFrom_Set')
}
function LuisOutputResponse_EntityFromType_Get
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_EntityFromType_Get_Return : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityFromType_Get(rh_instance:[$(rh_instance)])')
	gn_error := 0
	var lt_EntityFromType_prop : text := 'EntityFromType'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetProperty(rh_instance, lt_EntityFromType_prop, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxStringToEasyText(lh_retVar, LuisOutputResponse_EntityFromType_Get_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityFromType_Get := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityFromType_Get(LuisOutputResponse_EntityFromType_Get_Return:[$(LuisOutputResponse_EntityFromType_Get_Return)])')
}
function LuisOutputResponse_EntityFromType_Set
(
ref rh_instance : LuisOutputResponse
,value_ : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityFromType_Set(rh_instance:[$(rh_instance)], value:[$(value_)])')
	gn_error := 0
	var lh_value : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(value_, lh_value)
			}
	var lt_EntityFromType_prop : text := 'EntityFromType'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetProperty(rh_instance, lt_EntityFromType_prop, lh_value, go_exception)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityFromType_Set := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityFromType_Set')
}
function LuisOutputResponse_EntityFromScore_Get
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_EntityFromScore_Get_Return : Decimal 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityFromScore_Get(rh_instance:[$(rh_instance)])')
	gn_error := 0
	var lt_EntityFromScore_prop : text := 'EntityFromScore'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetProperty(rh_instance, lt_EntityFromScore_prop, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxDecimalToEasyNumber(lh_retVar, LuisOutputResponse_EntityFromScore_Get_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityFromScore_Get := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityFromScore_Get(LuisOutputResponse_EntityFromScore_Get_Return:[$(LuisOutputResponse_EntityFromScore_Get_Return)])')
}
function LuisOutputResponse_EntityFromScore_Set
(
ref rh_instance : LuisOutputResponse
,value_ : Decimal 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityFromScore_Set(rh_instance:[$(rh_instance)], value:[$(value_)])')
	gn_error := 0
	var lh_value : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyNumberToDecimal(value_, lh_value)
			}
	var lt_EntityFromScore_prop : text := 'EntityFromScore'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetProperty(rh_instance, lt_EntityFromScore_prop, lh_value, go_exception)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityFromScore_Set := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityFromScore_Set')
}
function LuisOutputResponse_EntityTo_Get
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_EntityTo_Get_Return : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityTo_Get(rh_instance:[$(rh_instance)])')
	gn_error := 0
	var lt_EntityTo_prop : text := 'EntityTo'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetProperty(rh_instance, lt_EntityTo_prop, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxStringToEasyText(lh_retVar, LuisOutputResponse_EntityTo_Get_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityTo_Get := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityTo_Get(LuisOutputResponse_EntityTo_Get_Return:[$(LuisOutputResponse_EntityTo_Get_Return)])')
}
function LuisOutputResponse_EntityTo_Set
(
ref rh_instance : LuisOutputResponse
,value_ : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityTo_Set(rh_instance:[$(rh_instance)], value:[$(value_)])')
	gn_error := 0
	var lh_value : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(value_, lh_value)
			}
	var lt_EntityTo_prop : text := 'EntityTo'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetProperty(rh_instance, lt_EntityTo_prop, lh_value, go_exception)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityTo_Set := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityTo_Set')
}
function LuisOutputResponse_EntityType_Get
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_EntityType_Get_Return : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityType_Get(rh_instance:[$(rh_instance)])')
	gn_error := 0
	var lt_EntityType_prop : text := 'EntityType'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetProperty(rh_instance, lt_EntityType_prop, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxStringToEasyText(lh_retVar, LuisOutputResponse_EntityType_Get_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityType_Get := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityType_Get(LuisOutputResponse_EntityType_Get_Return:[$(LuisOutputResponse_EntityType_Get_Return)])')
}
function LuisOutputResponse_EntityType_Set
(
ref rh_instance : LuisOutputResponse
,value_ : String 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityType_Set(rh_instance:[$(rh_instance)], value:[$(value_)])')
	gn_error := 0
	var lh_value : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyTextToString(value_, lh_value)
			}
	var lt_EntityType_prop : text := 'EntityType'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetProperty(rh_instance, lt_EntityType_prop, lh_value, go_exception)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityType_Set := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityType_Set')
}
function LuisOutputResponse_EntityToScore_Get
(
ref rh_instance : LuisOutputResponse
,ref LuisOutputResponse_EntityToScore_Get_Return : Decimal 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityToScore_Get(rh_instance:[$(rh_instance)])')
	gn_error := 0
	var lt_EntityToScore_prop : text := 'EntityToScore'
	var lh_retVar : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetProperty(rh_instance, lt_EntityToScore_prop, lh_retVar, go_exception)
			}
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::UnboxDecimalToEasyNumber(lh_retVar, LuisOutputResponse_EntityToScore_Get_Return)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityToScore_Get := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityToScore_Get(LuisOutputResponse_EntityToScore_Get_Return:[$(LuisOutputResponse_EntityToScore_Get_Return)])')
}
function LuisOutputResponse_EntityToScore_Set
(
ref rh_instance : LuisOutputResponse
,value_ : Decimal 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> LuisOutputResponse_EntityToScore_Set(rh_instance:[$(rh_instance)], value:[$(value_)])')
	gn_error := 0
	var lh_value : ObjectHandle
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::BoxEasyNumberToDecimal(value_, lh_value)
			}
	var lt_EntityToScore_prop : text := 'EntityToScore'
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::SetProperty(rh_instance, lt_EntityToScore_prop, lh_value, go_exception)
			}
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	LuisOutputResponse_EntityToScore_Set := gn_error
	call EasyDebug::OutHighDetail('<< LuisOutputResponse_EntityToScore_Set')
}
function Gender__IsReferenceOfType
(
io_objectHandle : ObjectHandle ,ref Gender__IsReferenceOfType_Return : text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> Gender__IsReferenceOfType(io_objectHandle:[$(io_objectHandle)])')
	gn_error := 0
	var lt_type : text
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetType(io_objectHandle, lt_type)
			}
	var lb_return : boolean
	if (lt_type = CognitiveServicesTTS_Gender) then 	{
		lb_return := true
	}
	else 	{
		lb_return := false
	}
	Gender__IsReferenceOfType_Return := lb_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	Gender__IsReferenceOfType := gn_error
	call EasyDebug::OutHighDetail('<< Gender__IsReferenceOfType(Gender__IsReferenceOfType_Return:[$(Gender__IsReferenceOfType_Return)])')
}
function Gender__GetValues
(
ref Gender__GetValues_Return : array of text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> Gender__GetValues()')
	gn_error := 0
	var lt_return : array of text
	add 'Female' to lt_return
	add 'Male' to lt_return
	Gender__GetValues_Return := lt_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	Gender__GetValues := gn_error
	call EasyDebug::OutHighDetail('<< Gender__GetValues(Gender__GetValues_Return: some value)')
}
function Gender__DecodeEnum
(
ie_enumeration : Gender_ ,ref Gender__DecodeEnum_Return : text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> Gender__DecodeEnum(ie_enumeration: some value)')
	gn_error := 0
	var lt_return : text
	case ie_enumeration 	{
		when Gender_::Female do 		{
			lt_return := 'Female'
		}
		when Gender_::Male do 		{
			lt_return := 'Male'
		}
		default 		{
			lt_return := ''
		}
	}
	Gender__DecodeEnum_Return := lt_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	Gender__DecodeEnum := gn_error
	call EasyDebug::OutHighDetail('<< Gender__DecodeEnum(Gender__DecodeEnum_Return:[$(Gender__DecodeEnum_Return)])')
}
function Gender__DecodeValueEnum
(
ie_enumeration : Gender_ ,ref Gender__DecodeValueEnum_Return : number(18,0) 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> Gender__DecodeValueEnum(ie_enumeration: some value)')
	gn_error := 0
	var ln_return : number(18,0)
	case ie_enumeration 	{
		when Gender_::Female do 		{
			ln_return := 0
		}
		when Gender_::Male do 		{
			ln_return := 1
		}
		default 		{
			ln_return := ''
		}
	}
	Gender__DecodeValueEnum_Return := ln_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	Gender__DecodeValueEnum := gn_error
	call EasyDebug::OutHighDetail('<< Gender__DecodeValueEnum(Gender__DecodeValueEnum_Return:[$(Gender__DecodeValueEnum_Return)])')
}
function Gender__ParseEnum
(
it_value : text ,ref Gender__ParseEnum_Return : Gender_ 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> Gender__ParseEnum(it_value:[$(it_value)])')
	gn_error := 0
	var le_return : Gender_
	case it_value 	{
		when 'Female' do 		{
			le_return := Gender_::Female
		}
		when 'Male' do 		{
			le_return := Gender_::Male
		}
		default 		{
			le_return := ''
		}
	}
	Gender__ParseEnum_Return := le_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	Gender__ParseEnum := gn_error
	call EasyDebug::OutHighDetail('<< Gender__ParseEnum(Gender__ParseEnum_Return: some value)')
}
function Gender__ParseValueEnum
(
in_value : number(18,0) ,ref Gender__ParseValueEnum_Return : Gender_ 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> Gender__ParseValueEnum(in_value:[$(in_value)])')
	gn_error := 0
	var le_return : Gender_
	case in_value 	{
		when 0 do 		{
			le_return := Gender_::Female
		}
		when 1 do 		{
			le_return := Gender_::Male
		}
		default 		{
			le_return := ''
		}
	}
	Gender__ParseValueEnum_Return := le_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	Gender__ParseValueEnum := gn_error
	call EasyDebug::OutHighDetail('<< Gender__ParseValueEnum(Gender__ParseValueEnum_Return: some value)')
}
function AudioOutputFormat_IsReferenceOfType
(
io_objectHandle : ObjectHandle ,ref AudioOutputFormat_IsReferenceOfType_Return : text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AudioOutputFormat_IsReferenceOfType(io_objectHandle:[$(io_objectHandle)])')
	gn_error := 0
	var lt_type : text
	if (gn_error = 0) then 		{
		gn_error := Net4ASL::GetType(io_objectHandle, lt_type)
			}
	var lb_return : boolean
	if (lt_type = CognitiveServicesTTS_AudioOutputFormat) then 	{
		lb_return := true
	}
	else 	{
		lb_return := false
	}
	AudioOutputFormat_IsReferenceOfType_Return := lb_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AudioOutputFormat_IsReferenceOfType := gn_error
	call EasyDebug::OutHighDetail('<< AudioOutputFormat_IsReferenceOfType(AudioOutputFormat_IsReferenceOfType_Return:[$(AudioOutputFormat_IsReferenceOfType_Return)])')
}
function AudioOutputFormat_GetValues
(
ref AudioOutputFormat_GetValues_Return : array of text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AudioOutputFormat_GetValues()')
	gn_error := 0
	var lt_return : array of text
	add 'Raw8Khz8BitMonoMULaw' to lt_return
	add 'Raw16Khz16BitMonoPcm' to lt_return
	add 'Riff8Khz8BitMonoMULaw' to lt_return
	add 'Riff16Khz16BitMonoPcm' to lt_return
	add 'Ssml16Khz16BitMonoSilk' to lt_return
	add 'Raw16Khz16BitMonoTrueSilk' to lt_return
	add 'Ssml16Khz16BitMonoTts' to lt_return
	add 'Audio16Khz128KBitRateMonoMp3' to lt_return
	add 'Audio16Khz64KBitRateMonoMp3' to lt_return
	add 'Audio16Khz32KBitRateMonoMp3' to lt_return
	add 'Audio16Khz16KbpsMonoSiren' to lt_return
	add 'Riff16Khz16KbpsMonoSiren' to lt_return
	AudioOutputFormat_GetValues_Return := lt_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AudioOutputFormat_GetValues := gn_error
	call EasyDebug::OutHighDetail('<< AudioOutputFormat_GetValues(AudioOutputFormat_GetValues_Return: some value)')
}
function AudioOutputFormat_DecodeEnum
(
ie_enumeration : AudioOutputFormat ,ref AudioOutputFormat_DecodeEnum_Return : text 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AudioOutputFormat_DecodeEnum(ie_enumeration: some value)')
	gn_error := 0
	var lt_return : text
	case ie_enumeration 	{
		when AudioOutputFormat::Raw8Khz8BitMonoMULaw do 		{
			lt_return := 'Raw8Khz8BitMonoMULaw'
		}
		when AudioOutputFormat::Raw16Khz16BitMonoPcm do 		{
			lt_return := 'Raw16Khz16BitMonoPcm'
		}
		when AudioOutputFormat::Riff8Khz8BitMonoMULaw do 		{
			lt_return := 'Riff8Khz8BitMonoMULaw'
		}
		when AudioOutputFormat::Riff16Khz16BitMonoPcm do 		{
			lt_return := 'Riff16Khz16BitMonoPcm'
		}
		when AudioOutputFormat::Ssml16Khz16BitMonoSilk do 		{
			lt_return := 'Ssml16Khz16BitMonoSilk'
		}
		when AudioOutputFormat::Raw16Khz16BitMonoTrueSilk do 		{
			lt_return := 'Raw16Khz16BitMonoTrueSilk'
		}
		when AudioOutputFormat::Ssml16Khz16BitMonoTts do 		{
			lt_return := 'Ssml16Khz16BitMonoTts'
		}
		when AudioOutputFormat::Audio16Khz128KBitRateMonoMp3 do 		{
			lt_return := 'Audio16Khz128KBitRateMonoMp3'
		}
		when AudioOutputFormat::Audio16Khz64KBitRateMonoMp3 do 		{
			lt_return := 'Audio16Khz64KBitRateMonoMp3'
		}
		when AudioOutputFormat::Audio16Khz32KBitRateMonoMp3 do 		{
			lt_return := 'Audio16Khz32KBitRateMonoMp3'
		}
		when AudioOutputFormat::Audio16Khz16KbpsMonoSiren do 		{
			lt_return := 'Audio16Khz16KbpsMonoSiren'
		}
		when AudioOutputFormat::Riff16Khz16KbpsMonoSiren do 		{
			lt_return := 'Riff16Khz16KbpsMonoSiren'
		}
		default 		{
			lt_return := ''
		}
	}
	AudioOutputFormat_DecodeEnum_Return := lt_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AudioOutputFormat_DecodeEnum := gn_error
	call EasyDebug::OutHighDetail('<< AudioOutputFormat_DecodeEnum(AudioOutputFormat_DecodeEnum_Return:[$(AudioOutputFormat_DecodeEnum_Return)])')
}
function AudioOutputFormat_DecodeValueEnum
(
ie_enumeration : AudioOutputFormat ,ref AudioOutputFormat_DecodeValueEnum_Return : number(18,0) 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AudioOutputFormat_DecodeValueEnum(ie_enumeration: some value)')
	gn_error := 0
	var ln_return : number(18,0)
	case ie_enumeration 	{
		when AudioOutputFormat::Raw8Khz8BitMonoMULaw do 		{
			ln_return := 0
		}
		when AudioOutputFormat::Raw16Khz16BitMonoPcm do 		{
			ln_return := 1
		}
		when AudioOutputFormat::Riff8Khz8BitMonoMULaw do 		{
			ln_return := 2
		}
		when AudioOutputFormat::Riff16Khz16BitMonoPcm do 		{
			ln_return := 3
		}
		when AudioOutputFormat::Ssml16Khz16BitMonoSilk do 		{
			ln_return := 4
		}
		when AudioOutputFormat::Raw16Khz16BitMonoTrueSilk do 		{
			ln_return := 5
		}
		when AudioOutputFormat::Ssml16Khz16BitMonoTts do 		{
			ln_return := 6
		}
		when AudioOutputFormat::Audio16Khz128KBitRateMonoMp3 do 		{
			ln_return := 7
		}
		when AudioOutputFormat::Audio16Khz64KBitRateMonoMp3 do 		{
			ln_return := 8
		}
		when AudioOutputFormat::Audio16Khz32KBitRateMonoMp3 do 		{
			ln_return := 9
		}
		when AudioOutputFormat::Audio16Khz16KbpsMonoSiren do 		{
			ln_return := 10
		}
		when AudioOutputFormat::Riff16Khz16KbpsMonoSiren do 		{
			ln_return := 11
		}
		default 		{
			ln_return := ''
		}
	}
	AudioOutputFormat_DecodeValueEnum_Return := ln_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AudioOutputFormat_DecodeValueEnum := gn_error
	call EasyDebug::OutHighDetail('<< AudioOutputFormat_DecodeValueEnum(AudioOutputFormat_DecodeValueEnum_Return:[$(AudioOutputFormat_DecodeValueEnum_Return)])')
}
function AudioOutputFormat_ParseEnum
(
it_value : text ,ref AudioOutputFormat_ParseEnum_Return : AudioOutputFormat 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AudioOutputFormat_ParseEnum(it_value:[$(it_value)])')
	gn_error := 0
	var le_return : AudioOutputFormat
	case it_value 	{
		when 'Raw8Khz8BitMonoMULaw' do 		{
			le_return := AudioOutputFormat::Raw8Khz8BitMonoMULaw
		}
		when 'Raw16Khz16BitMonoPcm' do 		{
			le_return := AudioOutputFormat::Raw16Khz16BitMonoPcm
		}
		when 'Riff8Khz8BitMonoMULaw' do 		{
			le_return := AudioOutputFormat::Riff8Khz8BitMonoMULaw
		}
		when 'Riff16Khz16BitMonoPcm' do 		{
			le_return := AudioOutputFormat::Riff16Khz16BitMonoPcm
		}
		when 'Ssml16Khz16BitMonoSilk' do 		{
			le_return := AudioOutputFormat::Ssml16Khz16BitMonoSilk
		}
		when 'Raw16Khz16BitMonoTrueSilk' do 		{
			le_return := AudioOutputFormat::Raw16Khz16BitMonoTrueSilk
		}
		when 'Ssml16Khz16BitMonoTts' do 		{
			le_return := AudioOutputFormat::Ssml16Khz16BitMonoTts
		}
		when 'Audio16Khz128KBitRateMonoMp3' do 		{
			le_return := AudioOutputFormat::Audio16Khz128KBitRateMonoMp3
		}
		when 'Audio16Khz64KBitRateMonoMp3' do 		{
			le_return := AudioOutputFormat::Audio16Khz64KBitRateMonoMp3
		}
		when 'Audio16Khz32KBitRateMonoMp3' do 		{
			le_return := AudioOutputFormat::Audio16Khz32KBitRateMonoMp3
		}
		when 'Audio16Khz16KbpsMonoSiren' do 		{
			le_return := AudioOutputFormat::Audio16Khz16KbpsMonoSiren
		}
		when 'Riff16Khz16KbpsMonoSiren' do 		{
			le_return := AudioOutputFormat::Riff16Khz16KbpsMonoSiren
		}
		default 		{
			le_return := ''
		}
	}
	AudioOutputFormat_ParseEnum_Return := le_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AudioOutputFormat_ParseEnum := gn_error
	call EasyDebug::OutHighDetail('<< AudioOutputFormat_ParseEnum(AudioOutputFormat_ParseEnum_Return: some value)')
}
function AudioOutputFormat_ParseValueEnum
(
in_value : number(18,0) ,ref AudioOutputFormat_ParseValueEnum_Return : AudioOutputFormat 
)
 : ErrorCode {
	call EasyDebug::InHighDetail('>> AudioOutputFormat_ParseValueEnum(in_value:[$(in_value)])')
	gn_error := 0
	var le_return : AudioOutputFormat
	case in_value 	{
		when 0 do 		{
			le_return := AudioOutputFormat::Raw8Khz8BitMonoMULaw
		}
		when 1 do 		{
			le_return := AudioOutputFormat::Raw16Khz16BitMonoPcm
		}
		when 2 do 		{
			le_return := AudioOutputFormat::Riff8Khz8BitMonoMULaw
		}
		when 3 do 		{
			le_return := AudioOutputFormat::Riff16Khz16BitMonoPcm
		}
		when 4 do 		{
			le_return := AudioOutputFormat::Ssml16Khz16BitMonoSilk
		}
		when 5 do 		{
			le_return := AudioOutputFormat::Raw16Khz16BitMonoTrueSilk
		}
		when 6 do 		{
			le_return := AudioOutputFormat::Ssml16Khz16BitMonoTts
		}
		when 7 do 		{
			le_return := AudioOutputFormat::Audio16Khz128KBitRateMonoMp3
		}
		when 8 do 		{
			le_return := AudioOutputFormat::Audio16Khz64KBitRateMonoMp3
		}
		when 9 do 		{
			le_return := AudioOutputFormat::Audio16Khz32KBitRateMonoMp3
		}
		when 10 do 		{
			le_return := AudioOutputFormat::Audio16Khz16KbpsMonoSiren
		}
		when 11 do 		{
			le_return := AudioOutputFormat::Riff16Khz16KbpsMonoSiren
		}
		default 		{
			le_return := ''
		}
	}
	AudioOutputFormat_ParseValueEnum_Return := le_return
	if (gn_error <> 0) then 	{
		var lt_errorMessage : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
		if (gn_error = Net4ASL::RETURN_EXCEPTION) then 		{
			var lt_excMessage : text
			var lt_excStackTrace : text
			var lt_excInnerException : ObjectHandle
			var ln_error_swap : ErrorCode
			ln_error_swap := gn_error
			gn_error := Net4ASL::ExceptionDetails(go_exception, lt_excMessage, lt_excStackTrace, lt_excInnerException)
			if (gn_error <> Net4ASL::RETURN_OK) then 			{
				var lt_excMessageDetailFailed : text := 'Error: [$(gn_error)] Message: [$(Net4ASL::ErrorMessage(gn_error))]'
				call EasyDebug::Error('[ERROR] $(lt_excMessageDetailFailed)')
			}
			gn_error := ln_error_swap
			lt_errorMessage := '$(lt_errorMessage) Exception: [$(lt_excMessage)] [$(lt_excStackTrace)]'
		}
		call EasyDebug::Error('[ERROR] $(lt_errorMessage)')
	}
	AudioOutputFormat_ParseValueEnum := gn_error
	call EasyDebug::OutHighDetail('<< AudioOutputFormat_ParseValueEnum(AudioOutputFormat_ParseValueEnum_Return: some value)')
}
on load 
{
	gn_error := Net4ASL::StartSession()
}
on unload 
{
	gn_error := Net4ASL::EndSession()
}
